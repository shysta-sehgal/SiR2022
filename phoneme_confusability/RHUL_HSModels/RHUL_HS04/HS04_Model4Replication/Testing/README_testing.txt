HS04_Model4Replication_0521: Testing

This folder contains various files that can be used to test the performance of trained Mikenet networks, more specifically implementations of Harm & Seidenberg's, 2004 triangle model of reading. The files are as follows:

weights_after_4000000_trials.zip: Weight matrix for network trained using HS04_Train.c on 4 million trials.

HS04_Test.c: 
This C script builds and tests a single instantiation of the triangle model of reading the properties of which are described in README_HS04_M4R.txt. 

It takes as input the name of a pattern file (file must be structured according to MikeNet syntax) which contains the patterns for each trial on which the network is to be tested. This must minimally contain a single representation to be clamped for at least one time step to one of the networks layers. The script also requires as input the mapping that the network is required to perform (p2p = phonology to phonology; s2s = semantics to semantics; p2s = phonology to semantics; s2p = semantics to phonology; o2ps = orthography to phonology & semantics).The script also requires a weight file generated from by a trained network (i.e. output of HS04_Train.c). Another required input variable is a value to initiate the random seed. 

The script will output a row for each trial in the pattern file. The first column of each row contains the trial name (i.e. TAG Word: *), this is followed by a vector containing the activation of each unit within a defined layer. The layer that the script outputs is defined at input (phonology = phonological layer; semantic = semantic layer; oshidden = hidden layer connecting orthography to semantics; ophidden = hidden layer connecting orthographic to phonology; pshidden = hidden layer connecting phonology to semantics; sphidden = hidden layer connecting semantics to phonology). The script also requires at input the time step on which layer activation is recorded, this can take any value between 0 and 11 (trials last a total of 12 time steps 0 ->11). 

To compile the HS04_Test.c script use the command 'make' once the corresponding makefile is retitled 'makefile'. Below is an example of a command that would run test trials within '6k_Pho_Train.pat', on a network with the weight matrix stored in 'saveweights_read_500000', with random seed 10, on task phonology to phonology, outputting the phonological layer's activation at time step 11.

> ./HS04_Test -seed 10 -tStep 11 -task p2p -layer phonology -weights saveweights_read_500000 -patterns 6k_Pho_Train.pat > NAME_OF_OUTPUT_FILE


Analyse_HS04.R
This R script allows the user to analyse the performance of the HS04 model tested using the script HS04_Test.c on a range of mapping tasks. The script requires the following R packages 'tidy', 'stringr', 'caret' & 'text2vec'. The script takes as input the following files: a results file output from the HS04_Test.c script containing the results of network performance on a set of test trials; a pattern file which is the pattern file used as input to the HS04_Test.c script which generated the results file [for analyses 1, 3 & 5 (see below) it is not necessary for a TARGET to be encoded in the pattern file]; the phonological mapping file which defines the mapping from phonemes to binary phoneme vectors (see 'mapping', this is only required if the network is to be tested on phonological mapping tasks); a corpus file that contains details of all items in the corpus in the following format (column 1: word name, column 2: word frequency, column 3: slot based orthographic form, column 4: slot based phonological form, column 5->onwards: sparsely coded semantic representations; see 6k_AllReps_8Slot_NxF for an example) [a corpus file is only required for analyses 3, 5, 6, 7; see below for details]. Lines 10 - 43 allow the user to set necessary variables which include the file names of each input file in addition to: the directory in which the required files can be found; the outputLayer which is the layer for which activity is to be analysed; Ana2Per which defines the method of analysis to perform. The script allows the user to perform 7 different forms of analysis and thus generate 7 different forms of output file. A given form of analysis is generated by setting the Ana2Per parameter as follows:

1 = Converts phonological layer activity on each test trial in the results file into a slot based phoneme representation by comparing activation to phoneme vectors as defined in 'mapping' using cosine similarity. The output file contains a row for each trial in the results file, each column contains the following information: Trial = the trial name as given in the results file; PhonologyOutput = slot-based phoneme representation derived from phonological activations.

2 = This option first performs the same analysis as option 1, but in addition generates from the TARGET pattern defined in the pattern file a slot-based phoneme level representation of the target on each trial. This target representation is compared to the form generated by the network and the Levenshtein distance between forms calculated. The output file contains a row for each trial in the results file, each column contains the following information: Trial = same as option 1; PhonologicalOutput = same as option 1; PhonologyTarget = the cosine similarity slot based phoneme vector generated from TARGET for the given trial defined in the pattern file; LevDist = Levenshtein distance between PhonologyOutput and PhonologyTarget; Accuracy = a trial is recorded as accurate if the Levenshtein distance between target and output is zero. [Assumes: In pattern file full coding of target for phonology]

3 = Generates slot-based phoneme representation from network output as in options 1 & 2. Network's phonological output is then compared to all items in the corpus. The Levenshtein distance to the closest corpus item is recorded and up to 3 items within the corpus with this closest distance listed in the output. The output file contains a row for each trial in the results file, each column contains the following information: Trial = same as option 1; PhonologicalOutput = same as option 1; MinLevDist = smallest Levenshtein distance between output and corpus item; ClosestWordA-C: the first 3 words in the corpus within the minimum distance. [Assumes in corpus file phoneme slot based coding of phonology]

4 = Extracts the TARGET vector for each test trial from the pattern file. The output layer activity within the results file is then compared, using cosine similarity, to the target vector on the given test trial in addition to all other target vectors in the pattern file. The distance to the test trial target is given along with the closest distance to any other target in addition to the closest target's trial name. The output file contains a row for each trial in the results file, each column contains the following information: Trial = same as option 1; Distance2Target: cosine similarity between output and target on same trial; Distance2Closest = largest cosine similarity between output vector and any target within the pattern file; ClosestItemAmongstTargetPatterns = the name of the test trial for which the target was closest to network output; DuplicateTrialName = indicates whether in the pattern file there is more than one trial with the given trial name; Accuracy = whether the target for the given trial is closer than any other target within the pattern file. [Assumes: In pattern file full coding of target for phonology and sparse coding of target for semantics]

5 = Compares the output layer activity to all representations in the corpus and identifies the closest in terms of cosine similarity. The output file contains a row for each trial in the results file, each column contains the following information: Trial = same as option 1; DuplicateTrialNames = indicates whether there is more than one item in the corpus with the same name; Distance2ClosestItemInCorpus = cosine similarity between output vector and closest item in corpus; ClosestItemInCorpus = name of the closest item in the corpus; TrialNameIsClosest = indicates whether the trial name is the same as the name of the closest item in the corpus. [Assumes: In corpus file phoneme slot based coding of phonology and sparse coding of semantics]

6 = Generates slot-based phoneme representation from network output as in options 1, 2 & 3. Also generates slot-based phoneme representation of TARGET from pattern file. Compares distance between network generated output and target in terms of Levenshtein distance (as in option 2). Also finds and lists closest items in corpus in terms of Levenstein distance (as in option 3). The output file contains a row for each trial in the results file, each column contains the following information: Trial = same as option 1; PhonologicalOutput = same as option 1; PhonologyTarget = same as option 2; LevDist2Target = LevDist option 2; TargetAccuracy = recorded as accurate if distance to target equals zero; LevDist2CorpusItem = closest distance to corpus item as in option 3; ClosestCorpusWordA-C: the first 3 words in the corpus within the minimum distance [Assumes in corpus file phoneme slot based coding of phonology]

7 = Compares the output layer activity to all representations in the corpus (as in option 5) and the TARGET vector for the given trial as defined in the pattern file (as in option 4). The output file contains a row for each trial in the results file, each column contains the following information: Trial = same as option 1; DuplicateTrialNames = same as option 5; Distance2Target = cosine distance between network output and target vector for given trial; Distance2ClosestItemInCorpus = cosine similarity between network output and closest item in corpus; ClosestItemInCorpus = name of the closest item in the corpus; TargetIsClosest = indicates whether network activity is closer (or equal to) to the target or any vector in the corpus [Assumes: In corpus file phoneme slot based coding of phonology and sparse coding of semantics]

mapping: file encoding mapping from phonemes to binary phoneme vectors (as used in Chang, Monaghan & Welbourne, 2019)


Sub Folders (see README files within each sub folder for further details): 
> Analyse_Training_Tasks
> Division_of_Labour
> Noise
> Representational Similarity
> RT

